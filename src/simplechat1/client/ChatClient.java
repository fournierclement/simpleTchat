// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;   ObservableClient obvClient;  String id;    //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   * @param id The client's id.   */    public ChatClient(String host, int port, ChatIF clientUI, String id)     throws IOException   {	obvClient = new ObservableClient(host, port);	obvClient.addObserver(this);	obvClient.openConnection();    this.clientUI = clientUI;    this.id = id;    obvClient.sendToServer("#login " + id);  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  private void whatIs(String message) throws IOException {		String[] splittedMessage = message.split(" "); // Only the condition we														// want to see.		switch (splittedMessage[0]) {		case "#quit":			obvClient.closeConnection();			System.exit(0);			break;		case "#logoff":			try {				obvClient.closeConnection();			} catch (IOException e1) {				e1.printStackTrace();			}			break;		case "#sethost":			obvClient.setHost(splittedMessage[1]);			break;		case "#setport":			obvClient.setPort(Integer.parseInt(splittedMessage[1]));			break;		case "#login":			try {				if (!obvClient.isConnected()) {					obvClient.openConnection();				} else {					clientUI.display("You are already logged in, silly");				}			} catch (IOException e1) {				e1.printStackTrace();			}			break;		case "#gethost":			clientUI.display(obvClient.getHost());			break;		case "#getport":			clientUI.display(""+obvClient.getPort());			break;		default :			obvClient.sendToServer(message);			break;		}	}  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {    try    {    	if ( message.charAt(0) == '#'){    		whatIs(message);    	} else {    		obvClient.sendToServer(message);    	}    }    catch(IOException e)    {      clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }    /**   * This method terminates the client.   */  public void quit()  {    try    {    	obvClient.closeConnection();    }    catch(IOException e) {}    System.exit(0);  }   /**   * Hook method called after the connection has been closed.   * The default implementation does nothing. The method   * may be overriden by subclasses to perform special processing   * such as cleaning up and terminating, or attempting to   * reconnect.   */  protected void connectionClosed() {	  System.out.println("Connection successfully closed.");  }  /**   * Hook method called each time an exception is thrown by the   * client's thread that is waiting for messages from the server.   * The method may be overridden by subclasses.   *   * @param exception the exception raised.   */  protected void connectionException(Exception exception) {    clientUI.display("Connection brutally ended " + exception);  }@Overridepublic void update(Observable o, Object arg) {	if ( arg.equals(obvClient.CONNECTION_CLOSED)){		connectionClosed();	} else if ( arg.equals(obvClient.CONNECTION_ESTABLISHED)){		connectionEstablished();	} else if ( arg instanceof String ){		handleMessageFromServer(arg);	} else {		connectionException((Exception) arg);	}}private void connectionEstablished() {	clientUI.display("connection successfull");}}//End of ChatClient class