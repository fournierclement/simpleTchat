package client;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import client.*;import common.*;/** * This class constructs the UI for a chat client. It implements the chat * interface in order to activate the display() method. Warning: Some of the * code here is cloned in ServerConsole * * @author Fran&ccedil;ois B&eacute;langer * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @version July 2000 */public class ClientConsole implements ChatIF {	// Class variables *************************************************	/**	 * The default port to connect on.	 */	final public static int DEFAULT_PORT = 5555;	final public static String DEFAULT_ID = "Anon" + (Math.round((Math.random() * 100)));	// Instance variables **********************************************	/**	 * The instance of the client that created this ConsoleChat.	 */	ChatClient client;	// Constructors ****************************************************	/**	 * Constructs an instance of the ClientConsole UI.	 *	 * @param host	 *            The host to connect to.	 * @param port	 *            The port to connect on.	 */	public ClientConsole(String host, int port, String id) {		try {			client = new ChatClient(host, port, this, id);		} catch (IOException exception) {			System.out.println("Error: Can't setup connection!"					+ " Terminating client.");			System.exit(1);		}	}	// Instance methods ************************************************	/**	 * This method waits for input from the console. Once it is received, it	 * sends it to the client's message handler.	 */	public void accept() {		try {			BufferedReader fromConsole = new BufferedReader(					new InputStreamReader(System.in));			String message;			while (true) {				message = fromConsole.readLine();				if (message.startsWith("#")) {					whatIs(message);				} else {					client.handleMessageFromClientUI(message);				}			}		} catch (Exception ex) {			System.out.println("Unexpected error while reading from console!");		}	}	private void whatIs(String message) throws IOException {		String[] splittedMessage = message.split(" "); // Only the condition we														// want to see.		switch (splittedMessage[0]) {		case "#quit":			client.quit();			break;		case "#logoff":			try {				client.closeConnection();			} catch (IOException e1) {				e1.printStackTrace();			}			break;		case "#sethost":			client.setHost(splittedMessage[1]);			break;		case "#setport":			client.setPort(Integer.parseInt(splittedMessage[1]));			break;		case "#login":			try {				if (!client.isConnected()) {					client.openConnection();				} else {					display("You are already logged in, silly");				}			} catch (IOException e1) {				e1.printStackTrace();			}			break;		case "#gethost":			System.out.println(client.getHost());			break;		case "#getport":			System.out.println(client.getPort());			break;		default :			client.sendToServer(message);			break;		}	}	/**	 * This method overrides the method in the ChatIF interface. It displays a	 * message onto the screen.	 *	 * @param message	 *            The string to be displayed.	 */	public void display(String message) {		System.out.println(message);	}	// Class methods ***************************************************	/**	 * This method is responsible for the creation of the Client UI.	 *	 * @param args	 *            [0] The port to connect to.	 * @param args	 *            [1] The host to connect to.	 */	public static void main(String[] args) {		String host = "";		int port = 0; // The port number		String id = args.length == 0 ? DEFAULT_ID : args[0] ;		try {			port = Integer.parseInt(args[1]);		} catch (ArrayIndexOutOfBoundsException e) {			port = DEFAULT_PORT;		}		try {			host = args[2];		} catch (ArrayIndexOutOfBoundsException e) {			host = "localhost";		}		ClientConsole chat = new ClientConsole(host, port, id);		chat.accept(); // Wait for console data	}}// End of ConsoleChat class