package server;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import java.util.Observable;import java.util.Observer;import client.ChatIF;import client.ObservableClient;/** * This class overrides some of the methods in the abstract  * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class ChatServer  implements Observer{	  //Instance variables **********************************************	  	  /**	   * The interface type variable.  It allows the implementation of 	   * the display method in the server.	   */	  ChatIF serverUI; 	  ObservableOriginatorServer observableServer;	  	  //Constructors ****************************************************	  	  /**	   * Constructs an instance of the chat server.	   *	   * @param host The server to connect to.	   * @param port The port number to connect on.	   * @param serverUI The interface type variable.	   */	  	  public ChatServer(int port, ChatIF serverUI) 	    throws IOException 	  {		  this.observableServer = new ObservableOriginatorServer(port);		  this.observableServer.addObserver(this);		  this.serverUI = serverUI;	    // super(host, port); //Call the superclass constructor	  }	  	  //Instance methods ************************************************	    	  /**	   * This method handles all data that comes in from the server.	   *	   * @param msg The message from the server.	   */	  public void handleMessageFromClient(ConnectionToClient orignal, Object msg) 	  	  {		  System.out.println("coucou");	    serverUI.display(orignal.getName() + " : " + msg.toString());	  }	  /**	   * This method handles all data coming from the UI            	   *	   * @param message The message from the UI.    	 * @throws IOException 	   */	  public void handleMessageFromServerUI(String message) throws IOException	  {		if ( message.charAt(0) == '#' ) {			doCommands(message.split(" "));		} else {			sendToAllClients(message);		}		  	  }	  	  protected void doCommands(String[] message) throws IOException {		  switch(message[0]){			  case "#quit":				  quit();				  break;			  case "#setport":				  this.setPort(Integer.parseInt(message[1]));				  break;			  default:				  serverUI.display("Commande incorrecte, tapez '#aide' pour avoir la liste des commandes disponibles, toute ressemblance avec un message d'erreur existant est fortuite");		  }	}	  	  private void setPort(int parseInt) {		observableServer.setPort(parseInt);	}	private void sendToAllClients(String message) {		observableServer.sendToAllClients(message);	}	public void update(Observable o, Object arg) {		System.out.println(arg);		  Object orignalMessage = ((OriginatorMessage) arg).getMessage();		  ConnectionToClient orignal =  ((OriginatorMessage) arg).getOriginator();			if ( orignalMessage.toString().equals(observableServer.CLIENT_CONNECTED)){				clientConnected();			} else if (orignalMessage.toString().equals(observableServer.CLIENT_DISCONNECTED)){				clientDisconnected();			} else if (orignalMessage.toString().matches("(.*)" + observableServer.CLIENT_EXCEPTION + "(.*)" )){				clientException(orignalMessage);			} else if (orignalMessage.toString().matches("(.*)" + observableServer.LISTENING_EXCEPTION + "(.*)" )){				listeningException(orignalMessage);			} else if (orignalMessage.toString().equals(observableServer.SERVER_STOPPED)){				serverStopped();			} else if (orignalMessage.toString().equals(observableServer.SERVER_CLOSED)){				serverClosed();			} else if (orignalMessage.toString().equals(observableServer.SERVER_STARTED)){				serverStarted();			} else if (orignalMessage instanceof String){				handleMessageFromClient(orignal, orignalMessage);				} else {				connectionException(orignalMessage);			}		}	protected void connectionException(Object arg) {			serverUI.display(arg.toString());		}	protected void quit() {			System.exit(0);		}	protected void serverStarted() {			serverUI.display("The connection has been established, gl hf.");			}	protected void serverClosed() {			serverUI.display("The connection has been close, gg wp.");		}	protected void serverStopped() {		serverUI.display("The connection has been SHUTEDDOWN, gg wp.");	}	protected void listeningException(Object message) {		serverUI.display("Lol you failed with an exceptionnal exception");		serverUI.display(message.toString());	}	protected void clientException(Object message) {		serverUI.display("Lol he failed with an exceptionnal exception");		serverUI.display(message.toString());	}	protected void clientDisconnected() {		serverUI.display("Dat brat just get out");	}	protected void clientConnected() {		serverUI.display("Dat brat just get In");	}	  }//End of EchoServer class