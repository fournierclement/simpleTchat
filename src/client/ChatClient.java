// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;   ObservableClient observableCl;    //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI)     throws IOException   {	  this.observableCl = new ObservableClient(host, port);	  this.clientUI = clientUI;    // super(host, port); //Call the superclass constructor    this.observableCl.openConnection();  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.     * @throws IOException    */  public void handleMessageFromClientUI(String message) throws IOException  {	if ( message.charAt(0) == '#' ) {		observableCl.doCommands(message.split(" "));	} else {	    sendToServer(message);	}	    }    @Overridepublic void update(Observable o, Object arg) {	if ( arg.equals(observableCl.CONNECTION_CLOSED)){		connectionClosed();	} else if ( arg.equals(observableCl.CONNECTION_ESTABLISHED)){		connectionEstablished();	} else if ( arg.getClass() == "String".getClass() ){		handleMessageFromServer(arg);	} else {		connectionException(arg);	}}protected void connectionException(Object arg) {	clientUI.display(arg.toString());	quit();}protected void quit() {	// TODO Auto-generated method stub	System.exit(0);}protected void connectionEstablished() {	clientUI.display("The connection has been established, gl hf.");	}protected void connectionClosed() {	clientUI.display("The connection has been close, gg wp.");}public void sendToServer(String string) throws IOException {	observableCl.sendToServer(string);	}  }//End of ChatClient class